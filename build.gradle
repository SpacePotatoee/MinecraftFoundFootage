plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
}

loom {
	accessWidenerPath = file("src/main/resources/spb-revamped.accesswidener")
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

//configurations {
//	shade
//}

repositories {
	//Veil
	maven {
		name = 'BlameJared Maven (CrT / Bookshelf)'
		url = 'https://maven.blamejared.com'
	}

	//CCA
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}

	//Mod Menu
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}

	//Midnight lib
	maven {
		url = "https://api.modrinth.com/maven"
	}

	//GeckoLib
	maven {
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroupByRegex("software\\.bernie.*")
			includeGroup("com.eliotlash.mclib")
		}
	}

	//Simple Voice Chat
	maven {
		url = 'https://maven.maxhenkel.de/repository/public'
	}


	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		url "https://maven.bawnorton.com/releases"
	}
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//Veil
	modImplementation("foundry.veil:Veil-fabric-${project.minecraft_version}:${project.veil_version}") {
		transitive = false
	}
	include ("foundry.veil:Veil-fabric-${project.minecraft_version}:${project.veil_version}") {
		transitive = false
	}

	//Cardinal Components API
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"

	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"

	//Mod Menu
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

	//Midnight Lib
	modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"
	include "maven.modrinth:midnightlib:${project.midnightlib_version}"

	//GeckoLib
	modImplementation("software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}")
	implementation("com.eliotlash.mclib:mclib:20")

	//Simple Voice Chat
	implementation "de.maxhenkel.voicechat:voicechat-api:2.5.0"
	modImplementation "maven.modrinth:simple-voice-chat:fabric-${voicechat_version}"

	//Sound Physics Remastered compat
	modCompileOnly "maven.modrinth:qyVF9oeo:fabric-1.20.1-1.4.8"

	//Essential Compat
	modCompileOnly "maven.modrinth:essentialclient:1.20.1-1.4.2"

	//Essential Compat
	modCompileOnly "maven.modrinth:k2ZPuTBm:1.3.5.6"

	include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.2.0")))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}